THEORY ProofList IS
_f(1) & _f(2) & _f(3) & _f(14) & _f(15) & _f(49) & WellDefinedness_val_buffer.4,(_f(58) => _f(63));
_f(1) & _f(2) & _f(3) & _f(14) & _f(15) & _f(49) & WellDefinedness_val_buffer.3,(_f(58) => _f(51));
_f(1) & _f(2) & _f(3) & _f(14) & _f(15) & _f(49) & WellDefinedness_val_buffer.2,(_f(58) => _f(62));
_f(1) & _f(2) & _f(3) & _f(14) & _f(15) & _f(49) & WellDefinedness_val_buffer.1,(_f(58) => _f(45));
_f(1) & _f(2) & _f(3) & _f(14) & _f(15) & WellDefinedness_size_file.1,(_f(58) => _f(60));
_f(1) & _f(2) & _f(3) & _f(14) & _f(15) & _f(32) & WellDefinedness_create_record.4,(_f(58) => _f(61));
_f(1) & _f(2) & _f(3) & _f(14) & _f(15) & _f(32) & WellDefinedness_create_record.3,(_f(18) => _f(36));
_f(1) & _f(2) & _f(3) & _f(14) & _f(15) & _f(32) & WellDefinedness_create_record.2,(_f(58) => _f(60));
_f(1) & _f(2) & _f(3) & _f(14) & _f(15) & _f(32) & WellDefinedness_create_record.1,(_f(34) & _f(58) => _f(60));
_f(1) & _f(2) & _f(3) & _f(14) & _f(15) & _f(16) & WellDefinedness_get_record.2,(_f(58) => _f(59));
_f(1) & _f(2) & _f(3) & _f(14) & _f(15) & _f(16) & WellDefinedness_get_record.1,(_f(58) => _f(19));
_f(1) & _f(2) & _f(3) & _f(14) & _f(15) & _f(41) & val_buffer.1,(_f(45) & _f(46) & _f(45) & _f(46) & _f(50) => _f(51));
_f(1) & _f(2) & _f(3) & _f(14) & _f(15) & _f(41) & size_file.1,(_f(11) => _f(48));
_f(1) & _f(2) & _f(3) & _f(14) & _f(15) & mod_buffer.1,(_f(45) & _f(46) & _f(34) & _f(11) & _f(12) => _f(47));
_f(1) & _f(2) & _f(3) & _f(14) & _f(15) & _f(41) & not_in_buffer.1,(_f(42) & _f(11) => _f(43));
_f(1) & _f(2) & _f(3) & _f(14) & _f(15) & _f(33) & create_record.4,(_f(34) & _f(35) & _f(11) => _f(39));
_f(1) & _f(2) & _f(3) & _f(14) & _f(15) & _f(33) & create_record.3,(_f(34) & _f(35) & _f(11) & _f(30) => _f(38));
_f(1) & _f(2) & _f(3) & _f(14) & _f(15) & _f(33) & create_record.2,(_f(34) & _f(35) & _f(11) & _f(28) => _f(37));
_f(1) & _f(2) & _f(3) & _f(14) & _f(15) & _f(33) & create_record.1,(_f(34) & _f(35) & _f(18) => _f(36));
_f(1) & _f(2) & _f(3) & _f(14) & _f(15) & put_buffer.3,(_f(26) & _f(11) & _f(30) => _f(31));
_f(1) & _f(2) & _f(3) & _f(14) & _f(15) & put_buffer.2,(_f(26) & _f(11) & _f(28) => _f(29));
_f(1) & _f(2) & _f(3) & _f(14) & _f(15) & put_buffer.1,(_f(26) & _f(18) => _f(27));
_f(1) & _f(2) & _f(3) & _f(14) & _f(15) & get_record.4,(_f(17) & _f(11) & _f(23) => _f(24));
_f(1) & _f(2) & _f(3) & _f(14) & _f(15) & get_record.3,(_f(17) & _f(11) & _f(21) => _f(22));
_f(1) & _f(2) & _f(3) & _f(14) & _f(15) & get_record.2,(_f(17) & _f(11) & _f(12) => _f(20));
_f(1) & _f(2) & _f(3) & _f(14) & _f(15) & get_record.1,(_f(17) & _f(18) => _f(19));
_f(1) & _f(2) & _f(3) & Initialisation.2,(_f(4) & _f(5) & _f(6) & _f(4) & _f(5) & _f(6) & _f(7) & _f(8) & _f(9) & _f(11) & _f(12) => _f(13));
_f(1) & _f(2) & _f(3) & Initialisation.1,(_f(4) & _f(5) & _f(6) & _f(4) & _f(5) & _f(6) & _f(7) & _f(8) & _f(9) => _f(10))
END
&
THEORY Formulas IS
((NAT) = (((0) .. (2147483647)))) & ((INT) = (((-2147483647) .. (2147483647))));
FIELD: FIN(INTEGER) & not(FIELD = {}) & VALUE: FIN(INTEGER) & not(VALUE = {}) & FIELD: FIN(INTEGER) & not(FIELD = {}) & VALUE: FIN(INTEGER) & not(VALUE = {}) & ((max_rec) : ((NAT-{0})));
buf_vrb$1 : FIELD +-> VALUE & dom(buf_vrb$1) = FIELD & ((buf_vrb$1) : (((FIELD) --> (VALUE)))) & file_vrb$1 : NATURAL-{0} +-> ((FIELD) --> (VALUE)) & ((file_vrb$1) : (seq(((FIELD) --> (VALUE))))) & (size(file_vrb$1) +1 <= max_rec);
buf_vrb$2 : FIELD +-> VALUE;
dom(buf_vrb$2) = FIELD;
((buf_vrb$2) : (((FIELD) --> (VALUE))));
{} : NATURAL-{0} +-> ((FIELD) --> (VALUE));
(({}) : (seq(((FIELD) --> (VALUE)))));
(size({}) +1 <= max_rec);
(({}) : (((FIELD) --> (VALUE))));
"Refinement is correct";
"Check invariant ((record$1) = (buf_vrb$1))";
(({}) = (buf_vrb$2));
((name) : (((0) .. (size(bfile))))) & record : FIELD +-> VALUE & dom(record) = FIELD & ((record) : (((FIELD) --> (VALUE)))) & ((buffer) = ((({0}) <<| ({((name) |-> (record))})))) & bfile : NATURAL-{0} +-> ((FIELD) --> (VALUE)) & ((bfile) : (seq(((FIELD) --> (VALUE))))) & ((buffer) : (((dom(bfile)) +-> (((FIELD) --> (VALUE)))))) & ((updated) : (BOOL)) & ((((updated) = (FALSE))) => (buffer : POW( bfile))) & ((((updated) = (TRUE))) => (not(buffer = {})));
((bfile$1) = (file_vrb$1)) & ((record$1) = (buf_vrb$1)) & ((name) = (name$1)) & ((record) = (record$1)) & ((bfile) = (bfile$1)) & ((buffer) = (buffer$1)) & ((updated) = (updated$1));
((oo) : (dom(bfile)));
((oo) : (dom(bfile$1)));
"Precondition predicate";
((1) : (dom(file_vrb$1)));
((record$1) = ((file_vrb$1 )(1)));
"Check invariant ((name) = (name$1))";
((oo) = (1));
"Check invariant ((record) = (record$1))";
(((bfile$1 )(oo)) = (record$1));
((updated) = (TRUE));
((updated$1) = (TRUE));
((name$1) : (dom(file_vrb$1)));
"Check invariant ((bfile$1) = (file_vrb$1))";
((bfile$1) = (((file_vrb$1) <+ ({((name$1) |-> (buf_vrb$1))}))));
"Check invariant ((bfile) = (bfile$1))";
((((bfile$1) <+ ({((name$1) |-> (record$1))}))) = (bfile$1));
((vv) : (VALUE)) & not(size(bfile) = max_rec);
((oo$1) = (oo));
((vv) : (VALUE));
not(size(bfile$1) = max_rec);
not(size(file_vrb$1) = max_rec);
((bfile$1) = (((file_vrb$1) <- ((FIELD * {vv})))));
((((bfile$1) <- ((FIELD * {vv})))) = (bfile$1));
((size(((file_vrb$1) <- ((FIELD * {vv}))))) = ((size(bfile$1) + 1)));
((oo) : (((1) .. (size(bfile)))));
((vv$1) = (vv));
((oo) : (((1) .. (size(bfile$1)))));
((bool(not(oo = name$1))) = (bool(not(name$1 = oo))));
((oo) : (dom(buffer))) & ((ii) : (FIELD)) & ((vv) : (VALUE));
((oo) : (dom(buffer$1)));
((ii) : (FIELD));
((((record$1) <+ ({((ii) |-> (vv))}))) = (buf_vrb$1));
((size(file_vrb$1)) = (size(bfile$1)));
((oo) : (dom(buffer))) & ((ii) : (FIELD)) & ((oo) : (dom(buffer))) & ((ii) : (FIELD));
"Instruction Well Definess";
((ii) : (dom((buffer$1 )(oo))));
((buffer) = (buffer$1));
((bfile) = (bfile$1));
((record) = (record$1));
((name) = (name$1));
((record$1) = (buf_vrb$1));
((bfile$1) = (file_vrb$1));
"Well definedness";
((file_vrb$1) : (((dom(file_vrb$1)) +-> (ran(file_vrb$1)))));
((file_vrb$1) : (seq(ran(file_vrb$1))));
((((file_vrb$1) <- ((FIELD * {vv})))) : (seq(ran(((file_vrb$1) <- ((FIELD * {vv})))))));
((buffer$1) : (((dom(buffer$1)) +-> (ran(buffer$1)))));
(((buffer$1 )(oo)) : (((dom((buffer$1 )(oo))) +-> (ran((buffer$1 )(oo))))))
END
&
THEORY EnumerateX
END
