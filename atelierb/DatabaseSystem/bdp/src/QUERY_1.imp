/* QUERY_1
 * Author: T0164919
 * Creation date: 7/30/2015
 */

IMPLEMENTATION QUERY_1
REFINES QUERY

SEES
    DATA_BASE , BASIC_IO , BASIC_SEX , BASIC_STATUS

OPERATIONS
    pp , bb <-- get_new_dead_person =
    BEGIN
        STRING_WRITE ( "Mother Id:" ) ;
        pp <-- PERSON_read ;
        bb <-- is_present ( pp ) ;
        IF bb = FALSE THEN
            STRING_WRITE ( "Person does not exist\n" )

        ELSE
            bb <-- is_living ( pp ) ;
            IF bb = FALSE THEN
                STRING_WRITE ( "Person must be alive\n" )

            END
        END
     END ;

    ss , bb <-- get_sex_of_new =
    BEGIN
        STRING_WRITE ( "Sex: " ) ;
        ss <-- SEX_READ ;
        bb <-- not_saturated ;
        IF bb = FALSE THEN
            STRING_WRITE ( "System_full\n" )

        END
    END ;

    ss , ww , bb <-- get_sex_and_mother =
    BEGIN
       STRING_WRITE ( "Sex: " ) ;
       ss <-- SEX_READ ;
       STRING_WRITE ( "Person Id: " ) ; /*Mdofication from original model,improper message :"Mother Id"*/
       ww <-- PERSON_read ;
       bb <-- is_present ( ww ) ;
       IF bb = FALSE THEN
           STRING_WRITE ( "Person does not exist\n" )

       ELSE
           bb <-- is_woman ( ww ) ;
           IF bb = FALSE THEN
               STRING_WRITE ( "Person must be a woman\n" )

           ELSE
               bb <-- is_married ( ww ) ;
               IF bb = FALSE THEN
                   STRING_WRITE ( "Person must be married\n" )

               ELSE
                   bb <-- not_saturated ;
                   IF bb = FALSE THEN
                       STRING_WRITE ( "System full\n" )

                   END
               END
           END
       END
   END ;

    mm , ww , bb <-- get_new_couple =
    VAR pm , pw , bm , bms , bw , bws IN
        bb := TRUE ;
        STRING_WRITE ( "Man Id: " ) ;
        mm <-- PERSON_read ;
        STRING_WRITE ( "Woman Id" ) ;
        ww <-- PERSON_read ;
        pm <-- is_present ( mm ) ;
        pw <-- is_present ( ww ) ;
        IF pm = FALSE THEN
            bb := FALSE ;

            STRING_WRITE ( "First person does not exist\n" )
        END ;
        IF pw = FALSE THEN
            bb := FALSE ;

            STRING_WRITE ( "Second person does not exist\n" )
        END ;
        IF bb = TRUE THEN
            bm <-- is_woman ( mm ) ;
            bms <-- is_married ( mm ) ;
            bw <-- is_woman ( ww ) ;
            bws <-- is_married ( ww ) ;
            IF bm = TRUE THEN
                bb := FALSE ;

                STRING_WRITE ( "First person must be a man\n" )
            END ;
            IF bms = TRUE THEN
                bb := FALSE ;

                STRING_WRITE ( "First person must be a woman\n" )
            END ;
            IF bw = FALSE THEN
                bb := FALSE ;

                STRING_WRITE ( "Second person must be a woman\n" )
            END ;
            IF bws = TRUE THEN
                bb := FALSE ;

                STRING_WRITE ( "Second person must not be married\n" )
            END
        END
    END ;

    get_and_print_person =
    VAR pp , bb , vv , uu , ww , tt IN
        STRING_WRITE ( "Person Id: " ) ;
        pp <-- PERSON_read ;
        bb <-- is_present ( pp ) ;
        IF bb = FALSE THEN
            STRING_WRITE ( "Person does not exist \n" )

        ELSE
            STRING_WRITE ( "\n Person: " ) ;
            PERSON_write ( pp ) ;
            STRING_WRITE ( "\n Sex: " ) ;
            vv <-- val_sex ( pp ) ;
            SEX_WRITE ( vv ) ;
            STRING_WRITE ( "\n Status: " ) ;
            uu <-- val_status ( pp ) ;
            STATUS_WRITE ( uu ) ;
            bb <-- has_mother ( pp ) ;
            IF bb = TRUE THEN
                STRING_WRITE ( "\n Mother: " ) ;
                ww <-- val_mother ( pp ) ;
                PERSON_write ( ww )
            END ;
            bb <-- is_married ( pp ) ;
            IF bb = TRUE THEN
                STRING_WRITE ( "\n Spu=ouse: " ) ;
                tt <-- val_spouse ( pp ) ;
                PERSON_write ( tt )
            END
        END
    END

END
